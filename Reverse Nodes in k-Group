/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head ,int k){
        //base case
       ListNode* cursor = head;
        for(int i = 0; i < k; i++){
            if(cursor == nullptr) return head;
            cursor = cursor->next;
        }

        //solving : reversing 1st k nodes
       
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* forward = NULL;
        

        for(int i=0; i<k; i++){
            forward = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = forward;
           
        }
        
        //recursive call for other nodes
        if(forward != NULL){
            head -> next = reverseKGroup(forward,k);
        }

        //return head of reversed list

        return prev;
         
    }
};
