/*class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {        
      
      /**1st Brute Force : using set and extra space & TC : O(n^3) **/
      
      /*  set<vector<int>>st;
        int n = nums.size();

        for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            for(int k=j+1; k<n; k++){
               if(nums[i]+nums[j]+nums[k] == 0){
                vector<int>temp{nums[i],nums[j],nums[k]};
                sort(temp.begin(),temp.end());
                st.insert(temp);
               }
            }
        }
        }
        vector<vector<int>>ans(st.begin(),st.end());
       return ans;

       */

       /* better approach : using hashing*/
       
     /*  int n = nums.size();

       set<vector<int>>st;

       for(int i=0; i<n; i++){
        set<int>hashset;
        for(int j=i+1; j<n; j++){
        int third = -(nums[i]+nums[j]);
        if(hashset.find(third) != hashset.end()){
            vector<int>temp={nums[i],nums[j],third};
            sort(temp.begin(),temp.end());
            st.insert(temp);
        }
        hashset.insert(nums[j]);
        }
       }
       vector<vector<int>>ans{st.begin(),st.end()};
       return ans;
       

       /**Optimize Approach : using two pointer and sortintg **/

       /*int n = nums.size();
       
       vector<vector<int>>ans;
       sort(nums.begin(),nums.end());

       for(int i=0; i<n; i++){

        if(i > 0 && nums[i] == nums[i-1]){
            continue;
        }

        int j = i+1;
        int k = n-1;

        while(j < k){

            int sum = nums[i]+nums[j]+nums[k];

            if(sum < 0){
            j++;
            }
            else if(sum > 0){
            k--;
            }
            else{
                vector<int>temp={nums[i],nums[j],nums[k]};
                ans.push_back(temp);
                j++;
                k--;

                //skip duplicates

                while(j < k && nums[j] == nums[j-1])continue;
                while(j < k && nums[k] == nums[k+1])continue;
            }
        }

       }
       return ans;
    }
};*/
//Optimized Approach - O(n^2 logn + nlogn) - o(n^2 logn) time and O(n) space
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int target = 0;
        sort(nums.begin(), nums.end());
        set<vector<int>> s;
        vector<vector<int>> output;
        for (int i = 0; i < nums.size(); i++){
            int j = i + 1;
            int k = nums.size() - 1;
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if (sum == target) {
                    s.insert({nums[i], nums[j], nums[k]});
                    j++;
                    k--;
                } else if (sum < target) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        for(auto triplets : s)
            output.push_back(triplets);
        return output;
    }
};
