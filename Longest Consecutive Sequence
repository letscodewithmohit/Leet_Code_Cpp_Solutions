/**brute force **/

/*class Solution {
    // public:
    // bool Linear_search(vector<int>& nums,int x){
    //     for(int i=0; i<nums.size(); i++){
    //         if(nums[i]==x){
    //             return true;
    //         }
    //     }
    //     return false;
    }
public:
    int longestConsecutive(vector<int>& nums) {
        int n = nums.size();
        // int max_len = 1;
        // for(int i=0; i<n; i++){
        //     int ele = nums[i];
        //     int count = 1;
        //     while(Linear_search(nums,ele+1)==true){
        //         ele = ele + 1;
        //         count = count + 1;
        //     }
        //     max_len = max(max_len,count);
        // }
        // return max_len;
    }};*/

    /**better**/
/*class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        int largest = 1;
        int last_smallest = INT_MIN;
        int count = 0;
        for(int i=0; i<n; i++){
            if(nums[i]-1 == last_smallest){
            count++;
            last_smallest = nums[i];
            }
            else if(nums[i] != last_smallest){
                count = 1;
                last_smallest = nums[i];
            }
        largest = max(count,largest);
        }
        return largest;
    }
};*/

/**optimal**/


class Solution {
public:
    int longestConsecutive(vector<int>& nums) {

    int n = nums.size();
    if(n==0){
        return 0;
    }
    unordered_set<int>st;
    int largest = 1;
    int count = 0;
    for(int i=0; i<n; i++){
        st.insert(nums[i]);
    }

    for(auto it : st){
       if(st.find(it-1)==st.end()){
       count = 1;
       int x = it;
       while(st.find(x+1) != st.end()){
        count++;
        x=x+1;
       }

       largest = max(largest,count);
       }
    } 
    return largest;
    }
    };
