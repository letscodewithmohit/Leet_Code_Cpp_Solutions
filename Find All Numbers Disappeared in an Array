// class Solution {
// public:
//     vector<int> findDisappearedNumbers(vector<int>& nums) {
    
//     // int n = nums.size();
//     vector<int>ans;    
//     unordered_set<int>st(nums.begin(),nums.end());
//     nums.clear();
//     nums.assign(st.begin(),st.end());

//  sort(nums.begin(), nums.end());
//  int n = nums.size();
//     for(int i=0; i<n; i++){
//         if(i+1 != nums[i]){
//         ans.push_back(i+1);
//         }
//     }
//     return ans;
//     }
// };

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> ans;
        
        // Mark each number seen in the array
        for (int i = 0; i < nums.size(); i++) {
            int index = abs(nums[i]) - 1;
            if (nums[index] > 0) {
                nums[index] = -nums[index];
            }
        }
        
        // Collect all indices which have positive values
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > 0) {
                ans.push_back(i + 1);
            }
        }
        
        return ans;
    }
};


/*using set*/
/*class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int>vec;
        set<int>st;
        int n = nums.size();
        for(int i=0;i<n;i++)st.insert(nums[i]);

        for(int i=1;i<=n;i++){
            if(st.find(i) == st.end()){
                vec.push_back(i);
            }
        }
        return vec;
    }
};*/
