class Solution {
public:
    int findMaxK(vector<int>& nums) {
        //approch 1 using binary search
        sort(nums.begin(),nums.end());

        for(int i=nums.size()-1; i>=0; i--){
          if(std::binary_search(nums.begin(),nums.end(),-nums[i])){
            return nums[i];
          }
        }
        return -1;

        //approch 2 using looping

        // int maxk = -1;
        // int n = nums.size();
        // for(int i=0; i<n; i++){
        //     for(int j=i+1; j<n; j++){
        //         if(nums[i]+nums[j] == 0){
        //             maxk = max(maxk, std::max(nums[i],nums[j]));
        //         }
        //     }
           
        // }
        //  return maxk;

        // approch 3 using set

        // set<int>st;
        // int maxk = -1;
        // int n = nums.size();
        // for(int i=0; i<n; i++){
        //     st.insert(nums[i]);
        // }

        // //find 

        // for(auto i : st){
        //     if(st.find(-i) != st.end()){
        //     maxk = max(maxk,i);
        //     }
        // }
        // return maxk;
    }
};
