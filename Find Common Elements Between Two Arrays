// class Solution {
// public:
//     vector<int> findIntersectionValues(vector<int>& nums1, vector<int>& nums2) {
//         int n =  nums1.size();
//         int m = nums2.size();
         
//          set<int>s1;
//          set<int>s2;

//          for(int i = 0; i<n; i++){
//              s1.insert(nums1[i]);
//          }

//          for(int j = 0; j<m; j++){
//              s2.insert(nums2[j]);
//          }

//         vector<int>ans(2);
//         int cnt1 = 0;
//         int cnt2 = 0;
      
//         for(int i=n-1; i>=0; i--){
//             if(s2.find(nums1[i])){
//                 cnt1++;
//             }
//         }

//         for(int j=m-1; j>=0; j--){
//             if(s1.find(nums2[i])){
//                 cnt2++;
//             }
//         }

//         ans[0]=cnt1;
//         ans[1]=cnt2;

//         return ans;

//     }
// };

class Solution {
public:
    // time/space: O(nums1.length + nums2.length)/O(nums1.length + nums2.length)
    vector<int> findIntersectionValues(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> set1(nums1.begin(), nums1.end());
        unordered_set<int> set2(nums2.begin(), nums2.end());
        int count1 = 0, count2 = 0;
        for (auto& num : nums1) count1 += set2.count(num);
        for (auto& num : nums2) count2 += set1.count(num);
        return {count1, count2};
    }
};
