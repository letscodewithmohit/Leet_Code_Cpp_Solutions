class Solution {
public: 
    int getgcd(int a,int b){
        if(a == 0){
            return b;
        }
        if(b == 0){
            return a;
        }
        if(a == b){
            return a;
        }
        if(a > b){
        return  getgcd(a-b,b);
        }
        return getgcd(a,b-a);

    }
public:
    int findGCD(vector<int>& nums) {

    //approch 1 using build-in function 
     /*  int n = nums.size();
       sort(nums.begin(),nums.end());
       int big = nums[n-1];
       int small = nums[0];

       return __gcd(big,small); */

    //approch 2 using Euclidean Algorithm
     
      int n = nums.size();
       sort(nums.begin(),nums.end());
       int big = nums[n-1];
       int small = nums[0];
       int ans = getgcd(big, small);
       return ans;
    }
};
